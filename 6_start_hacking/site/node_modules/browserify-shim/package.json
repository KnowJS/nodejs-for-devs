{
  "name": "browserify-shim",
  "version": "3.5.0",
  "description": "Makes CommonJS-incompatible modules browserifyable.",
  "main": "index.js",
  "scripts": {
    "test": "tap test/*.js && tap test/shim/*.js",
    "shim-jquery": "npm install opener && cd ./examples/shim-jquery && npm install && node build.js && opener index.html",
    "shim-jquery-diag": "npm install opener && cd ./examples/shim-jquery && npm install && node build-diag.js && opener index.html",
    "expose-jquery": "npm install opener && cd ./examples/expose-jquery && npm install && node build.js && opener index.html",
    "expose-jquery-diag": "npm install opener && cd ./examples/expose-jquery && npm install && node build-diag.js && opener index.html"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/thlorenz/browserify-shim.git"
  },
  "keywords": [
    "browserify",
    "browserify-transform",
    "shim",
    "global",
    "globals",
    "transform",
    "window",
    "commonjs"
  ],
  "author": {
    "name": "Thorsten Lorenz",
    "email": "thlorenz@gmx.de",
    "url": "thlorenz.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "devDependencies": {
    "browserify": "~4.1.2",
    "jsdom": "~0.7.0",
    "ncp": "~0.5.0",
    "proxyquire": "~0.5.1",
    "request": "~2.12.0",
    "rimraf": "~2.2.6",
    "tap": "~0.3.3"
  },
  "dependencies": {
    "exposify": "~0.1.2",
    "mothership": "~0.2.0",
    "rename-function-calls": "~0.1.0",
    "resolve": "~0.6.1",
    "through": "~2.3.4"
  },
  "peerDependencies": {
    "browserify": ">= 2.3.0 < 5"
  },
  "readme": "#browserify-shim [![build status](https://secure.travis-ci.org/thlorenz/browserify-shim.png?branch=master)](http://travis-ci.org/thlorenz/browserify-shim)\n\n[![NPM](https://nodei.co/npm/browserify-shim.png?downloads=true&stars=true)](https://nodei.co/npm/browserify-shim/)\n\n### Make CommonJS-Incompatible Files Browserifyable\n\n#### package.json\n\n```json\n{\n  \"main\": \"./js/entry.js\",\n  \"browser\": {\n    \"jquery\": \"./js/vendor/jquery.js\"\n  },\n  \"browserify-shim\": {\n    \"jquery\": \"$\",\n    \"three\": \"global:THREE\"\n  },\n  \"browserify\": {\n    \"transform\": [ \"browserify-shim\" ]\n  },\n  \"dependencies\": {\n    \"browserify-shim\": \"~3.2.0\"\n  }\n}\n```\n\n    browserify . -d -o bundle.js\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](http://doctoc.herokuapp.com/)*\n\n- [Installation](#installation)\n- [Features](#features)\n- [API](#api)\n\t- [You Will Always](#you-will-always)\n\t\t- [1. Install browserify-shim dependency](#1-install-browserify-shim-dependency)\n\t\t- [2. Register browserify-shim as a transform with browserify](#2-register-browserify-shim-as-a-transform-with-browserify)\n\t\t- [3. Provide browserify-shim config](#3-provide-browserify-shim-config)\n\t\t\t- [Short Form vs. Long Form config](#short-form-vs-long-form-config)\n\t- [You will sometimes](#you-will-sometimes)\n\t\t- [a) Expose global variables via `global:*`](#a-expose-global-variables-via-global)\n\t\t\t- [1. add script tag for library you want to expose](#1-add-script-tag-for-library-you-want-to-expose)\n\t\t\t- [2. Add expose global config to `package.json`](#2-add-expose-global-config-to-packagejson)\n\t\t\t- [2.a. Add expose global config to external shim config](#2a-add-expose-global-config-to-external-shim-config)\n\t\t\t- [3. Require library by the name it was exposed as](#3-require-library-by-the-name-it-was-exposed-as)\n\t\t\t- [Why not just `var THREE = window.THREE`?](#why-not-just-var-three-=-windowthree)\n\t\t- [b) Use aliases](#b-use-aliases)\n\t\t- [c) Provide an external shim config](#c-provide-an-external-shim-config)\n\t\t- [d) Diagnose what browserify-shim is doing](#d-diagnose-what-browserify-shim-is-doing)\n- [Multi Shim Example including dependencies](#multi-shim-example-including-dependencies)\n\t- [a) Config inside `package.json` without aliases](#a-config-inside-packagejson-without-aliases)\n\t- [b) Config inside `package.json` with aliases](#b-config-inside-packagejson-with-aliases)\n\t- [c) Config inside `./config/shim.js` without aliases](#c-config-inside-configshimjs-without-aliases)\n\t\t- [`package.json`](#packagejson)\n\t\t- [`shim.js`](#shimjs)\n- [More Examples](#more-examples)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installation\n\n    npm install browserify-shim\n\n*For a version compatible with browserify@1.x run `npm install browserify-shim@1.x` instead.*\n\n*For a version compatible with the [v2 API](https://github.com/thlorenz/browserify-shim/tree/v2#api) `npm install browserify-shim@2.x` instead.*\n\n## Features\n\nThe core features of browserify-shim are:\n\n- Shims **non-CommonJS** modules in order for them to be **browserified** by specifying an alias, the path to the file,\n  and the identifier under which the module attaches itself to the global `window` object.\n- Includes `depends` for  shimming libraries that depend on other libraries being in the global namespace.\n- applies shims configured inside the dependencies of your package\n\nAdditionally, it handles the following real-world edge cases:\n\n- Modules that just declare a `var foo = ...` on the script level and assume it gets attached to the `window` object.\n  Since the only way they will ever be run is in the global context — \"ahem, … NO?!\"\n- Makes `define` and also `module` be `undefined`, in order to fix [improperly-authored\n  libraries](https://github.com/mhemesath/r2d3/blob/918bd076e4f980722438b2594d1eba53a522ce75/r2d3.v2.js#L222) that need\n  shimming but try anyway to use AMD or CommonJS. For more info read the comment inside [this\n  fixture](https://github.com/thlorenz/browserify-shim/blob/master/test/shim/fixtures/shims/lib-with-exports-define-global-problem.js)\n- removes invalid requires, i.e. `require('jquery')` although `'jquery'` isn't installed due to the library being\n  improperly published or *installed* incorrectly via a downloader like [bower](http://bower.io/)\n\nSince `browserify-shim` is a proper `browserify` transform you can publish packages with files that need to be shimmed,\ngranted that you specify the shim config inside the `package.json`.\n\nWhen `browserify` resolves your package it will run the `browserify-shim` transform and thus shim what's necessary\nwhen generating the bundle.\n\n## API\n\n### You Will Always\n\n#### 1. Install browserify-shim dependency\n\nIn most cases you want to install it as a [devDependency](https://npmjs.org/doc/json.html#devDependencies) via:\n\n    npm install -D browserify-shim\n\n#### 2. Register browserify-shim as a transform with browserify\n\nInside `package.json` add:\n\n```json\n{ \n  \"browserify\": {\n    \"transform\": [ \"browserify-shim\" ]\n  }\n}\n```\n\n#### 3. Provide browserify-shim config\n\nInside `package.json` add:\n\n```json\n{\n  \"browserify-shim\": {\n    \"./js/vendor/jquery.js\": \"$\",\n    \"three\": \"global:THREE\"\n  }\n}\n```\n\nThe above includes `./js/vendor/jquery.js` (relative to the `package.json`) in the bundle and exports `window.$`.\n\nAdditionally it exposes `window.THREE` as `three`, so you can `var three = require('three')`. More info\n[below](#a-expose-global-variables-via-global).\n\n##### Short Form vs. Long Form config\n\nSince `jquery` does not depend on other shimmed modules and thus has no `depends` field, we used the short form to\nspecify its exports, however the example above is equivalent to:\n\n```json\n{\n  \"browserify-shim\": {\n    \"./js/vendor/jquery.js\": { \"exports\": \"$\" }\n  }\n}\n```\n\n### You will sometimes\n\n#### a) Expose global variables via `global:*`\n\nIn some cases the libraries you are using are very large and you'd prefer to add them via a script tag instead to get\nthe following benefits:\n\n- faster bundling times since the library is not included in the bundle\n- pull libraries from a [CDN](http://en.wikipedia.org/wiki/Content_delivery_network) which allows it to be pulled\n  straight from the user's browser cache in case it was downloaded before\n\nWe'll show how this works by taking the rather huge yet awesome `THREE.js` library as an example:\n\n##### 1. add script tag for library you want to expose\n\n```html\n<!-- index.html -->\n<head>\n  <meta charset=utf-8 />\n  <script type=\"text/javascript\" src=\"http://cdnjs.cloudflare.com/ajax/libs/three.js/r61/three.min.js\"></script>\n</head>\n```\n\n##### 2. Add expose global config to `package.json`\n\n```json\n{\n  \"browserify-shim\": {\n    \"three\": \"global:THREE\"\n  }\n}\n```\n\n##### 2.a. Add expose global config to external shim config \n\nIn case you are using an extenal shim config, you may achieve the same by specifying the global via an `export`.\n\n```js\nmodule.exports = {\n  three.js': { exports: 'global:THREE' }\n}\n```\n\n[more about extenal configs here](#c-config-inside-configshimjs-without-aliases)\n\n**Note:** `THREE.js` attaches `window.THREE`.\n\n##### 3. Require library by the name it was exposed as\n\n```js\nvar THREE = require('three');\n```\n\n##### Why not just `var THREE = window.THREE`?\n\nYou want to avoid spreading the knowledge that `THREE` is a global and stay consistent in how you resolve dependencies.\nAdditionally if `THREE` would ever be published to [npm](https://npmjs.org/) and you decide to install it from there,\nyou don't have to change any of your code since it already is `require`ing it properly.\n\n\n#### b) Use aliases\n\nYou may expose files under a different name via the [`browser` field](https://gist.github.com/defunctzombie/4339901#replace-specific-files---advanced) and refer to them under that alias in the shim config:\n\n```json\n{\n  \"browser\": {\n    \"jquery\": \"./js/vendor/jquery.js\"\n  },\n  \"browserify-shim\": {\n    \"jquery\": \"$\"\n  }\n}\n```\n\nThis also allows you to require this module under the alias, i.e.: `var $ = require('jquery')`.\n\n#### c) Provide an external shim config\n\n```json\n{\n  \"browserify-shim\": \"./config/shim.js\"\n}\n```\n\nThe external shim format is very similar to the way in which the shim is specified inside the `package.json`. See\n[below](#c-config-inside-configshimjs-without-aliases) for more details.\n\n#### d) Diagnose what browserify-shim is doing\n\nYou may encounter problems when your shim config isn't properly setup. In that case you can diagnose them via the\n`BROWSERIFYSHIM_DIAGNOSTICS` flag.\n\nSimply set the flag when building your bundle, i.e.: \n\n    BROWSERIFYSHIM_DIAGNOSTICS=1 browserify -d . -o js/bundle.js\n\nor in a `build.js` script add: `process.env.BROWSERIFYSHIM_DIAGNOSTICS=1` to the top.\n\n## Multi Shim Example including dependencies\n\nSome libraries depend on other libraries to have attached their exports to the window for historical reasons :(.\n(Hopefully soon we can truly say that this bad design is history.)\n\nIn this contrived example we are shimming four libraries since none of them are commonJS compatible:\n\n- **x** exports **window.$**\n- **x-ui** exports nothing since it just **attaches itself to x**. Therefore x-ui depends on x.\n- **y** exports **window.Y** and also **depends on x** expecting to find it on the window as $.\n- **z** exports **window.zorro** and **depends on x and y**. It expects to find x on the window as $, but y on the window as YNOT, \nwhich is actually different than the name under which y exports itself.\n\nWe will be using the `depends` field in order to ensure that a dependency is included and initialized before a library\nthat depends on it is initialized.\n\nBelow are three examples, each showing a way to properly shim the above mentioned modules.\n\n### a) Config inside `package.json` without aliases\n\n```json\n{\n  \"browserify\": {\n    \"transform\": [ \"browserify-shim\" ]\n  },\n  \"browserify-shim\": {\n    \"./vendor/x.js\"    :  \"$\",\n    \"./vendor/x-ui.js\" :  { \"depends\": [ \"./vendor/x.js\" ] },\n    \"./vendor/y.js\"    :  { \"exports\": \"Y\", \"depends\": [ \"./vendor/x.js:$\" ] },\n    \"./vendor/z.js\"    :  { \"exports\": \"zorro\", \"depends\": [ \"./vendor/x.js:$\", \"./vendor/y.js:YNOT\" ] }\n  }\n}\n```\n\n**Note:** the `depends` array consists of entries of the format `path-to-file:export`\n\n### b) Config inside `package.json` with aliases\n\n```json\n{\n  \"browserify\": {\n    \"transform\": [ \"browserify-shim\" ]\n  },\n  \"browser\": {\n    \"x\"    :  \"./vendor/x.js\",\n    \"x-ui\" :  \"./vendor/x-ui.js\",\n    \"y\"    :  \"./vendor/y.js\",\n    \"z\"    :  \"./vendor/z.js\"\n  },\n   \"browserify-shim\": {\n    \"x\"    :  \"$\",\n    \"x-ui\" :  { \"depends\": [ \"x\" ] },\n    \"y\"    :  { \"exports\": \"Y\", \"depends\": [ \"x:$\" ] },\n    \"z\"    :  { \"exports\": \"zorro\", \"depends\": [ \"x:$\", \"y:YNOT\" ] }\n  }\n}\n```\n\n**Note:** the `depends` entries make use of the aliases as well `alias:export`\n\n### c) Config inside `./config/shim.js` without aliases\n\n#### `package.json`\n\n```json\n{\n  \"browserify\": {\n    \"transform\": [ \"browserify-shim\" ]\n  },\n  \"browserify-shim\": \"./config/shim.js\"\n}\n```\n\n#### `shim.js`\n\n```js\nmodule.exports = {\n  '../vendor/x.js'    :  { 'exports': '$' },\n  '../vendor/x-ui.js' :  { 'depends': { '../vendor/x.js': null } },\n  '../vendor/y.js'    :  { 'exports': 'Y', 'depends': { '../vendor/x.js': '$' } },\n  '../vendor/z.js'    :  { 'exports': 'zorro', 'depends': { '../vendor/x.js': '$', '../vendor/y.js': 'YNOT' } }\n}\n```\n\n**Note:** all paths are relative to `./config/shim.js` instead of the `package.json`.\n\nThe main difference to `a)` is the `depends` field specification. Instead it being an array of strings it expresses its dependencies as a hashmap:\n\n- **key:** `path-to-file` \n- **value:**  the name under which it is expected to be attached on the window\n\n## More Examples\n\n- [shim-jquery](https://github.com/thlorenz/browserify-shim/tree/master/examples/shim-jquery)\n- [expose-jquery](https://github.com/thlorenz/browserify-shim/tree/master/examples/expose-jquery)\n- [shim-jquery-external](https://github.com/thlorenz/browserify-shim/tree/master/examples/shim-jquery-external)\n- the [tests](https://github.com/thlorenz/browserify-shim/tree/master/test) are a great resource to investigate the\n  different ways to configure shims and to understand how shims are applied to packages found inside the `node_modules`\n  of your package\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/thlorenz/browserify-shim/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n",
  "bugs": {
    "url": "https://github.com/thlorenz/browserify-shim/issues"
  },
  "homepage": "https://github.com/thlorenz/browserify-shim",
  "_id": "browserify-shim@3.5.0",
  "_shasum": "dfa232e411c35cefeb62715503ba68cb10f53940",
  "_from": "browserify-shim@3.5.0",
  "_resolved": "https://registry.npmjs.org/browserify-shim/-/browserify-shim-3.5.0.tgz"
}
